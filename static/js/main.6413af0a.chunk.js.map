{"version":3,"sources":["logo.svg","utils/updateRedeemStatus.js","App.js","utils/hexToRgb.js","reportWebVitals.js","index.js"],"names":["status","updateRedeemStatus","client_id","user_id","reward_id","redeem_id","fetch","method","body","JSON","stringify","headers","sessionStorage","twitchOAuthToken","then","response","json","console","log","clientId","App","useState","ready","setReady","_authUrl","setAuthUrl","userId","setUserId","r","g","b","first","setFirst","second","setSecond","third","setThird","fourth","setFourth","inputHex","setInputHex","ws","useRef","authUrl","useCallback","twitchOAuthState","nonce","length","text","possible","i","charAt","Math","floor","random","listen","channelId","message","type","data","topics","auth_token","Date","toLocaleString","current","send","heartbeat","connect","heartbeatHandle","connected","WebSocket","onopen","event","setInterval","onerror","error","onmessage","parse","Authorization","res","id","setTimeout","rgbValue","hex","result","exec","parseInt","valid","hexToRgb","redemption","user_input","reward","title","includes","currentState","onclose","clearInterval","useEffect","document","location","hash","match","hashMatch","expr","state","parseFragment","className","style","background","animation","animationDirection","display","href","src","logo","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6413af0a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const status = {\n    canceled: \"CANCELED\",\n    fulfilled: \"FULFILLED\"\n}\n\nexport const updateRedeemStatus = (client_id, user_id, reward_id, redeem_id, status) => {\n    fetch(`https://api.twitch.tv/helix/channel_points/custom_rewards/redemptions?broadcaster_id=${user_id}&reward_id=${reward_id}&id=${redeem_id}}`, {\n        method: 'PATCH',\n        body: JSON.stringify({ \"status\": status }),\n        headers: {\n            'client-id': client_id,\n            'Authorization': `Bearer ${sessionStorage.twitchOAuthToken}`,\n            'Content-type': 'application/json;',\n        },\n    })\n        .then(response => response.json())\n        .then(json => console.log(json));\n}","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { hexToRgb } from \"./utils/hexToRgb\";\nimport { updateRedeemStatus, status } from \"./utils/updateRedeemStatus\";\n\nconst clientId = \"5styqm5roq5f90rfyylk9fezdiu1mm\";\nconst redirectURI = \"https://samkitkat.github.io/twitch-background/\";\nconst scope = \"channel:read:redemptions%20user:read:email%20channel:manage:redemptions\";\n\n// const getRandomInt = () => {\n//   return Math.floor(Math.random() * 256);\n// };\n\nfunction App() {\n  const [ready, setReady] = useState(false);\n  const [_authUrl, setAuthUrl] = useState(\"/twitch-background\");\n\n  const [userId, setUserId] = useState();\n  const [first, setFirst] = useState({ r: 102, g: 0, b: 204 });\n  const [second, setSecond] = useState({ r: 255, g: 255, b: 255 });\n  const [third, setThird] = useState({ r: 255, g: 255, b: 255 });\n  const [fourth, setFourth] = useState({ r: 255, g: 255, b: 255 });\n  const [inputHex, setInputHex] = useState(0);\n\n  var ws = useRef();\n\n  var parseFragment = (hash) => {\n    var hashMatch = function (expr) {\n      var match = hash.match(expr);\n      return match ? match[1] : null;\n    };\n    var state = hashMatch(/state=(\\w+)/);\n    if (sessionStorage.twitchOAuthState === state)\n      sessionStorage.twitchOAuthToken = hashMatch(/access_token=(\\w+)/);\n  };\n\n  var authUrl = useCallback(() => {\n    sessionStorage.twitchOAuthState = nonce(15);\n    var url =\n      \"https://id.twitch.tv/oauth2/authorize\" +\n      \"?response_type=token\" +\n      \"&client_id=\" +\n      clientId +\n      \"&redirect_uri=\" +\n      redirectURI +\n      \"&state=\" +\n      sessionStorage.twitchOAuthState +\n      \"&scope=\" +\n      scope;\n    return url;\n  }, []);\n\n  var getUserId = () => {\n    return fetch(\"https://api.twitch.tv/helix/users\", {\n      headers: {\n        Authorization: `Bearer ${sessionStorage.twitchOAuthToken}`,\n        \"Client-Id\": clientId,\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setUserId(data.data[0].id)\n        return data.data[0].id\n      });\n  };\n\n  var nonce = (length) => {\n    var text = \"\";\n    var possible =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  };\n  var listen = useCallback((channelId) => {\n    let message = {\n      type: \"LISTEN\",\n      nonce: nonce(15),\n      data: {\n        topics: [`channel-points-channel-v1.${channelId}`],\n        auth_token: sessionStorage.twitchOAuthToken,\n      },\n    };\n    console.log(new Date().toLocaleString(), \"SENT:\", message);\n    ws.current.send(JSON.stringify(message));\n  }, []);\n\n  var heartbeat = () => {\n    let message = {\n      type: \"PING\",\n    };\n    ws.current.send(JSON.stringify(message));\n  };\n\n  var connect = useCallback(() => {\n    var heartbeatInterval = 1000 * 60;\n    var reconnectInterval = 1000 * 3;\n    var heartbeatHandle;\n    var connected = false;\n\n    ws.current = new WebSocket(\"wss://pubsub-edge.twitch.tv\");\n\n    ws.current.onopen = function (event) {\n      console.log(new Date().toLocaleString(), \"INFO: Socket Opened\");\n      heartbeat();\n      heartbeatHandle = setInterval(heartbeat, heartbeatInterval);\n    };\n\n    ws.current.onerror = function (error) {\n      console.error(new Date().toLocaleString(), \"ERR:\", error);\n    };\n\n    ws.current.onmessage = function (event) {\n      let message = JSON.parse(event.data);\n      var data = message.data && message.data.message;\n      if (data) message = JSON.parse(data);\n      console.log(new Date().toLocaleString(), \"RECV:\", message, \"USER_ID:\", userId);\n      if (message.type === \"PONG\") {\n        if (!connected) {\n          getUserId().then((channelId) => {\n            connected = true;\n            listen(channelId);\n          });\n        }\n      }\n      if (message.type === \"RECONNECT\") {\n        console.log(new Date().toLocaleString(), \"INFO: Reconnecting...\");\n        setTimeout(connect, reconnectInterval);\n      }\n      if (message.type === \"reward-redeemed\") {\n        let color = message.data.redemption.user_input;\n        let rgbValue = hexToRgb(color);\n        if (userId) {\n          if (!rgbValue.valid) {\n            updateRedeemStatus(clientId, userId, message.data.redemption.reward.id, message.data.redemption.id, status.canceled);\n            return;\n          }\n\n          if (message.data.redemption.reward.title.includes(\"gradient\")) {\n\n            if (inputHex === 0) {\n              setFirst(rgbValue);\n            }\n            else if (inputHex === 1) {\n              setSecond(rgbValue);\n            }\n            else if (inputHex === 2) {\n              setThird(rgbValue);\n            }\n            else if (inputHex === 3) {\n              setFourth(rgbValue);\n            }\n\n            setInputHex(currentState => {\n              if (currentState > 3) {\n                return 0;\n              }\n              else{\n                return currentState+1;\n              }\n            });\n            updateRedeemStatus(clientId, userId, message.data.redemption.reward.id, message.data.redemption.id, status.fulfilled);\n          }\n        }\n      }\n    };\n\n    ws.current.onclose = function () {\n      console.log(new Date().toLocaleString(), \"INFO: Socket Closed\");\n      clearInterval(heartbeatHandle);\n      console.log(new Date().toLocaleString(), \"INFO: Reconnecting...\");\n      setTimeout(connect, reconnectInterval);\n      connected = false;\n    };\n  }, [ws, listen, userId, inputHex]);\n\n  useEffect(() => {\n    if (document.location.hash.match(/access_token=(\\w+)/))\n      parseFragment(document.location.hash);\n    if (sessionStorage.twitchOAuthToken) {\n      connect();\n      setReady(true);\n    } else {\n      setAuthUrl(authUrl());\n      setReady(false);\n    }\n  }, [authUrl, connect]);\n\n  return (\n    <div\n      className=\"header\"\n      style={{\n        background: `linear-gradient(60deg, rgba(${first.r},${first.g},${first.b}) 0%, rgba(${second.r},${second.g},${second.b}), \n        rgba(${third.r},${third.g},${third.b}), rgba(${fourth.r},${fourth.g},${fourth.b}) 100%) 0% 0% / 400% 400%`,\n        animation: 'gradient 20s ease infinite',\n        animationDirection: 'alternate',\n      }}\n    >\n      <div className=\"inner-header flex\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div\n              style={{ display: ready ? \"none\" : \"block\" }}\n              className=\"auth text-center\"\n            >\n              <p>First, connect with your Twitch Account:</p>\n              <a id=\"auth-link\" href={_authUrl}>\n                <img src={logo} alt=\"logo\" />\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const hexToRgb = (hex) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n      ? {\n          r: parseInt(result[1], 16),\n          g: parseInt(result[2], 16),\n          b: parseInt(result[3], 16),\n          valid: true\n        }\n      : {\n          r: 0,\n          g: 0,\n          b: 0,\n          valid: false\n        };\n  };","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}